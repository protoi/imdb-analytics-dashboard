{"version":3,"sources":["BarGraph.js","App.js","reportWebVitals.js","index.js"],"names":["MyBarGraph","_ref","d","_useState","useState","_useState2","Object","slicedToArray","graphData","_useState3","_useState4","barOrPie","setBarOrPie","someEvent","e","console","log","dir","activeTooltipIndex","react_default","a","createElement","BarChart","width","height","data","margin","top","right","left","bottom","onClick","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Bar","fill","PieChart","Pie","isAnimationActive","cx","cy","outerRadius","label","ddddd","name","queries","App","className","BarGraph","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"0TAsFeA,EApEI,SAAHC,GAAc,IAARC,EAACD,EAADC,EAACC,EACWC,mBAASF,GAAEG,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAtCK,EAASH,EAAA,GAA+BI,GAAjBJ,EAAA,GACED,mBAAS,QAAMM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAE1B,SAASG,EAAUC,GACjBC,QAAQC,IAAIF,GACZC,QAAQE,IAAIH,EAAEI,oBASUN,EAAP,QAAbD,EAAgC,MACnB,OAEnB,MAAiB,QAAbA,EAEAQ,EAAAC,EAAAC,cAACC,EAAA,EAAQ,CACPC,MAAO,IACPC,OAAQ,IACRC,KAAMjB,EACNkB,OAAQ,CACNC,IAAK,EACLC,MAAO,EACPC,KAAM,EACNC,OAAQ,KAEVC,QAAS,SAACjB,GACC,MAALA,GACJD,EAAUC,KAGZK,EAAAC,EAAAC,cAACW,EAAA,EAAa,CAACC,gBAAgB,QAC/Bd,EAAAC,EAAAC,cAACa,EAAA,EAAK,CAACC,QAAQ,SACfhB,EAAAC,EAAAC,cAACe,EAAA,EAAK,MACNjB,EAAAC,EAAAC,cAACgB,EAAA,EAAO,MACRlB,EAAAC,EAAAC,cAACiB,EAAA,EAAG,CAACH,QAAQ,UAAUI,KAAK,YAK9BpB,EAAAC,EAAAC,cAACmB,EAAA,EAAQ,CACPjB,MAAO,IACPC,OAAQ,IACRO,QAAS,SAACjB,GACC,MAALA,GACJD,EAAUC,KAGZK,EAAAC,EAAAC,cAACoB,EAAA,EAAG,CACFN,QAAQ,UACRO,mBAAmB,EACnBjB,KAAMjB,EACNmC,GAAI,IACJC,GAAI,IACJC,YAAa,IACbN,KAAK,SACLO,OAAK,IAEP3B,EAAAC,EAAAC,cAACgB,EAAA,EAAO,QCjEVU,EAAQ,CACZ,CACEC,KAAM,QACNC,QAAS,KAEX,CACED,KAAM,QACNC,QAAS,KAEX,CACED,KAAM,QACNC,QAAS,KAEX,CACED,KAAM,OACNC,QAAS,KAEX,CACED,KAAM,eACNC,QAAS,MAuCEC,MATf,WACE,OACE/B,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAC+B,EAAU,CAAClD,EAAG6C,MCvDNM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA1C,EAAA,GAAA2C,KAAAD,EAAAE,KAAA,WAAqBD,KAAK,SAAAxD,GAAiD,IAA9C0D,EAAM1D,EAAN0D,OAAQC,EAAM3D,EAAN2D,OAAQC,EAAM5D,EAAN4D,OAAQC,EAAM7D,EAAN6D,OAAQC,EAAO9D,EAAP8D,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHjD,EAAAC,EAAAC,cAACF,EAAAC,EAAMiD,WAAU,KACflD,EAAAC,EAAAC,cAACiD,EAAG,QAORjB","file":"static/js/main.80c63bc7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  PieChart,\n  Pie,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  // Legend,\n} from \"recharts\";\n/* const sampleData = [\n  { x: \"A\", y: 150 },\n  { x: \"B\", y: 200 },\n  { x: \"C\", y: 400 },\n]; */\n\nconst MyBarGraph = ({ d }) => {\n  let [graphData, setGraphData] = useState(d); //array\n  let [barOrPie, setBarOrPie] = useState(\"bar\");\n  //barorpie\n  function someEvent(e) {\n    console.log(e);\n    console.dir(e.activeTooltipIndex);\n    /* setGraphData(\n      graphData.map((x) => {\n        return {\n          name: x.name,\n          queries: x.queries * (e.activeTooltipIndex + 1),\n        };\n      })\n    ); */\n    if (barOrPie === \"bar\") setBarOrPie(\"pie\");\n    else setBarOrPie(\"bar\");\n  }\n  if (barOrPie === \"bar\") {\n    return (\n      <BarChart\n        width={500}\n        height={500}\n        data={graphData}\n        margin={{\n          top: 0,\n          right: 0,\n          left: 0,\n          bottom: 100,\n        }}\n        onClick={(e) => {\n          if (e == null) return;\n          someEvent(e);\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Bar dataKey=\"queries\" fill=\"salmon\" />\n      </BarChart>\n    );\n  } else {\n    return (\n      <PieChart\n        width={500}\n        height={500}\n        onClick={(e) => {\n          if (e == null) return;\n          someEvent(e);\n        }}\n      >\n        <Pie\n          dataKey=\"queries\"\n          isAnimationActive={false}\n          data={graphData}\n          cx={250}\n          cy={250}\n          outerRadius={200}\n          fill=\"salmon\"\n          label\n        />\n        <Tooltip />\n      </PieChart>\n    );\n  }\n};\n\nexport default MyBarGraph;\n","import React from \"react\";\nimport \"./App.css\";\nimport MyBarGraph from \"./BarGraph\";\n// import { VictoryBar, VictoryChart, VictoryAxis } from 'victory';\n\n/* import {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n*/\nconst ddddd = [\n  {\n    name: \"actor\",\n    queries: 400,\n  },\n  {\n    name: \"genre\",\n    queries: 300,\n  },\n  {\n    name: \"movie\",\n    queries: 200,\n  },\n  {\n    name: \"plot\",\n    queries: 270,\n  },\n  {\n    name: \"release_year\",\n    queries: 190,\n  },\n];\n/* \nfunction BarPlot({ d }) {\n  return (\n      <BarChart\n        width={500}\n        height={500}\n        data={d}\n        margin={{\n          top: 0,\n          right: 0,\n          left: 0,\n          bottom: 100,\n        }}\n        onClick={(e) => {\n          console.log(e);\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        \n        <Bar dataKey=\"queries\" fill=\"#8884d8\" />\n      </BarChart>\n  );\n}\n */\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyBarGraph d={ddddd}></MyBarGraph>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}